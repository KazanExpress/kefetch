{"version":3,"file":"kefetchup.es5.js","sources":["../src/errors.ts","../src/defaultFetch.ts","../src/genericClient.ts","../src/util.ts","../src/index.ts"],"sourcesContent":["export class ResponseError<T = Response> extends Error {\n  constructor(\n    message: string,\n    public status: ResponseErrors,\n    public data?: T\n  ) {\n    super(message)/* istanbul ignore next: because stupid typescript */;\n    Object.setPrototypeOf(this, ResponseError.prototype);\n    this.name = 'ResponseError';\n  }\n\n  toString() {\n    return this.name + ': ' + this.message;\n  }\n}\n\n/**\n * @deprecated use ResponseError instead\n *//* istanbul ignore next */\nexport class ResponseException<T = Response> extends ResponseError<T> {\n  constructor(message: string, status: ResponseErrors, data?: T) {\n    super(message, status, data);\n    this.name = 'ResponseException';\n  }\n}\n\nexport enum ResponseErrors {\n  BadRequest = 400,\n  Unauthorized = 401,\n  PaymentRequired = 402,\n  Forbidden = 403,\n  NotFound = 404,\n  MethodNotAllowed = 405,\n  NotAcceptable = 406,\n  ProxyAuthenticationRequired = 407,\n  RequestTimeout = 408,\n  Conflict = 409,\n  Gone = 410,\n  LengthRequired = 411,\n  InvalidMedia = 415,\n  'I\\'m a teapot' = 418,\n  Unprocessable = 422,\n  TooManyRequests = 429,\n  ServerError = 500,\n  NotImplemented = 501,\n  BadGateway = 502,\n  ServiceUnavailable = 503,\n  GatewayTimeout = 504,\n  UnknownError = -1\n}\n","import { ResponseErrors } from './errors';\n\n/**\n * Default fetch handler\n *\n * @export\n * @param {string} url\n * @param {RequestInit} [options]\n * @returns {Promise<Response>}\n */\nexport function defaultFetch(url: string, options?: RequestInit): Promise<Response> {\n  return Promise.resolve(new Response(\n    JSON.stringify(defaultFetchHandlerResponseBody(url, options)),\n    defaultFetchHandlerResponseOptions\n  ));\n}\n\nexport const defaultFetchHandlerResponseBody = (url: string, options?: RequestInit) => ({\n  error: 'Default-fetch-handler response.',\n\n  // Emulate a behaviour of JSON.stringify that does not enumerate undefined properties\n  ...(url === undefined ? {} : { to: url }),\n  ...(options === undefined ? {} : { options })\n});\n\nexport const defaultFetchHandlerResponseOptions = {\n  status: ResponseErrors[`I'm a teapot`],\n  statusText: '`fetch` missing in `window`'\n};\n","import { defaultFetch } from './defaultFetch';\nimport { ResponseError, ResponseErrors } from './errors';\n\n/**\n * Generic API client with default request.\n * Inherit from this class to create a custom extendable api client.\n *\n * Can be instantiated on its own for simple singular requests.\n */\nexport class GenericAPIClient {\n  public fetchHandler = window.fetch ? window.fetch.bind(window) : defaultFetch;\n\n  /**\n   * Creates an instance of GenericAPIClient.\n   * @param {string} [baseURL=''] a base url to prepend to all request urls except for the ones with root urls\n   * @param {RequestInit} [baseClientConfig={}] a default config for requests\n   */\n  constructor(\n    public readonly baseURL: string = '',\n    public readonly baseClientConfig: RequestInit = {}\n  ) {}\n\n  /**\n   * Makes requests using request factory and resolves config merge conflicts.\n   *\n   * @private\n   */\n  private request(\n    url: string,\n    fetchConfig: RequestInit,\n    overrideDefaultConfig: boolean = false\n  ): Promise<any> {\n    if (!url.match(/^(\\w+:)?\\/\\//)) {\n      url = this.baseURL ? new URL(url, this.baseURL).href : url;\n    }\n\n    return this.requestFactory(\n      url,\n      overrideDefaultConfig ?\n        fetchConfig :\n        {\n          ...this.baseClientConfig,\n          ...fetchConfig,\n          headers: {\n            ...(this.baseClientConfig.headers || {}), ...(fetchConfig.headers || {})\n          }\n        },\n      this.fetchHandler\n    );\n  }\n\n  /**\n   * Processes the response before allowing to return its value from request function.\n   * Override this function to provide custom response interception.\n   * Keep in mind that this function does not have to return a promise.\n   *\n   * @protected\n   * @param {Response} response the response returned from fetchHandler\n   * @returns {*} default: the same response\n   * @memberof GenericAPIClient\n   */\n  protected responseHandler(response: Response): any {\n    if (response.ok) {\n      return response;\n    } else {\n      throw new ResponseError(GenericAPIClient.handleStatus(response.status), response.status, response);\n    }\n  }\n\n  /**\n   * Processes the request error before allowing to throw it upstack.\n   * Override this function to provide custom response error handling.\n   * Return value instead of throwing for soft error handling.\n   *\n   * @protected\n   * @param e the error catched from the request promise\n   * @memberof GenericAPIClient\n   */\n  protected errorHandler(e): any {\n    if (e instanceof ResponseError) {\n      throw e;\n    } else {\n      // Network error!\n      throw new ResponseError('Unkown Error: ', ResponseErrors.UnknownError, e);\n    }\n  }\n\n  /**\n   * A general request factory function.\n   * Calls request and error handlers, can be used for pre-processing the url and request config before sending.\n   * Override for a completely custom request & response handling behaviour.\n   *\n   * @protected\n   * @param url a url string that would be passed into the request function\n   * @param config a request config that would be passed into the request function\n   * @param requestFunction\n   */\n  protected requestFactory(\n    url: string,\n    config: RequestInit,\n    requestFunction: (url: string, config?: RequestInit) => Promise<Response>\n  ): Promise<any> {\n    return requestFunction(url, config)\n      .then(r => this.responseHandler(r))\n      .catch(e => this.errorHandler(e));\n  }\n\n  /**\n   * Request method alias factory.\n   * Used to quickly produce alias function for class' decendants.\n   * Override at your own risk.\n   *\n   * @protected\n   * @param {string} method HTTP method (GET, PUT, POST, etc) to alias\n   * @returns an alias function for request\n   * @memberof GenericAPIClient\n   */\n  protected alias(method: string) {\n    return function (this: GenericAPIClient,\n      url: string,\n      fetchConfig: RequestInit = this.baseClientConfig,\n      overrideDefaultConfig?: boolean\n    ): ReturnType<typeof this['request']> {\n      fetchConfig = fetchConfig;\n      fetchConfig.method = method ? method.toUpperCase() : (fetchConfig.method || 'GET').toUpperCase();\n      return this.request(url, fetchConfig, overrideDefaultConfig);\n    }\n  }\n\n  public readonly get = this.alias('get');\n  public readonly put = this.alias('put');\n  public readonly post = this.alias('post');\n  public readonly patch = this.alias('patch');\n  public readonly delete = this.alias('delete');\n\n  /**\n   * Retrieves response status string in a readable format from a status number\n   *\n   * @param {number|string} [status=-1] Response status (200, 404, 500, etc)\n   * @returns {string} a status literal for logging\n   */\n  public static handleStatus(status?: number): string;\n\n  /**\n   * Retrieves response status number from a readable PascalCase string\n   *\n   * @param {number|string} [status=-1] Response status (\"NotFound\", \"OK\", \"Unknown\", etc)\n   * @returns {number} a status number for requests\n   */\n  public static handleStatus(status: string): number;\n\n  public static handleStatus(status: number | string = -1) {\n    return ResponseErrors[status] || ResponseErrors[-1];\n  }\n}\n","/**\n * Encode an object into the plain URL as url-query-string\n *\n * ```js\nwithQuery('/list', {\n  amount: 5,\n  filters: ['price', 'date']\n})```\n *\n * returns\n * ```js\n'/list?amount=5&filters=price,date'```\n *\n * @param {String} url a url to encode params into\n * @param {Object} queryParams query params in object form\n * @returns url with encoded params\n */\nexport function withQuery<T extends object>(url: string, queryParams: T) {\n  const encodeQuery = (value, key) => `${encodeURIComponent(key)}=${encodeURI(value)}`;\n\n  const queryArr = Object.keys(queryParams)\n    .filter(k => !!k && queryParams[k] !== undefined)\n    .map((k: any) => {\n      if (Array.isArray(queryParams[k])) {\n        return encodeQuery(queryParams[k].join(','), k);\n      }\n\n      return encodeQuery(queryParams[k], k);\n    });\n\n  const queryStr = queryArr.length !== 1 ? queryArr.join('&') : queryArr[0];\n\n  const prefix = (url.indexOf('?') > -1 ? '&' : '?');\n\n  return url + (queryStr.length > 0 ? prefix + queryStr : '');\n}\n","import { GenericAPIClient } from './genericClient';\n\nexport * from './genericClient';\nexport * from './errors';\nexport * from './util';\n\n/**\n * @inheritdoc\n */\nexport class JsonAPIClient extends GenericAPIClient {\n  /**\n   * @inheritdoc\n   */\n  responseHandler(resp: Response): Promise<unknown> {\n    return resp.json();\n  }\n}\n\n/**\n * @inheritdoc\n */\nexport class TextAPIClient extends GenericAPIClient {\n  /**\n   * @inheritdoc\n   */\n  responseHandler(resp: Response) {\n    return resp.text();\n  }\n}\n"],"names":["tslib_1.__extends","ResponseErrors"],"mappings":"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"}